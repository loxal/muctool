/*
 * MUCtool Web Toolkit
 *
 * Copyright 2018 Alexander Orlov <alexander.orlov@loxal.net>. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

group "net.loxal.waves"
version "1.0.0"

buildscript {
    dependencies {
        // classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin2js"

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/classes/kotlin/main/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.main = "call"
    kotlinOptions.suppressWarnings = false
    kotlinOptions.target = "v5"
    kotlinOptions.noStdlib = true
    kotlinOptions.friendModulesDisabled = false
    kotlinOptions.sourceMapEmbedSources = "inlining"
    kotlinOptions.typedArrays = false
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

build.doLast {
    String buildPath = "../service/static/app"
    project.file("$buildPath/$project.name").deleteDir()

    copy {
        from compileKotlin2Js.destinationDir
        into "$buildPath/$project.name"
    }

    copy {
        from compileTestKotlin2Js.destinationDir
        into "$buildPath/$project.name"
    }

    copy {
        from sourceSets.main.output.resourcesDir
        into "$buildPath/$project.name/resources"
    }

//    configurations.compile.each { file ->
//        copy {
//            includeEmptyDirs = true
//            from zipTree(file.absolutePath)
//            into "$buildPath/runtime"
//        }
//    }

    configurations.testCompile.each { File file ->
        copy {
            includeEmptyDirs = true
            from zipTree(file.absolutePath)
            into "$buildPath/runtime"
        }
    }
}

